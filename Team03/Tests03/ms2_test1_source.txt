procedure rearChickens {
    eggs = 100000;
    chicks = 0;
    while (chicks < 100000 && eggs > 0) {
        if (chicks > eggs) then {
            call wiggle;
            print eggs;
            read luck;
            if (luck > eggs) then {
                call hatch;
                eggs = eggs - 1;
                chicks = chicks + 1;
            } else { read better;
                print luck;
                read next;
                print time;}
        } else { print more;
            print chicks;
            print than;
            print eggs;
            while (chicks > eggs) {
                call killChicks;
                chicks = chicks - 1;}
            print now;
            read i;
            print have;
            read less;
            print chicks;}}
    print chicks;
}

procedure wiggle {
    print something;
    read is;
    print shaking;
    print is;
    read it;
    read hatching;
    print questionMark;
}

procedure hatch {
    call wiggle;
    call wiggle;
    call wiggle;
    call makeNoise;
    call breakEgg;
}

procedure makeNoise {
    pok = 1;
    print pok;
    read pok;
    pok = 2;
    print pok;
    read pok;
    pok = pok + 1;
    print pok;
    read pok;
    pok = 1 * chicks;
}

procedure breakEgg {
    print prack;
}

procedure killChicks {
    read weapon;
    print how;
    print many;
    read times;
    read to;
    read smack;
    call screamInPain;
}

procedure screamInPain {
    print stop;
    print pls;
    read stop;
    print exclaimationMark;
}